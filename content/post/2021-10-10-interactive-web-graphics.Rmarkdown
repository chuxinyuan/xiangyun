---
title: "交互式网页图形与 R 语言"
author: "黄湘云"
date: '2021-10-10'
slug: interactive-web-graphics
toc: true
categories:
  - 统计图形
tags:
  - plotly
  - highcharter
  - echarts4r
bibliography: [refer.bib]
link-citations: true
draft: true
thumbnail: https://user-images.githubusercontent.com/12031874/110227135-11e04400-7f30-11eb-949d-61210ee37f5a.png
description: "交互式网页图形。"
---

```{css, echo=FALSE}
.rmdinfo {
  border: 1px solid #ccc;
}

.rmdinfo {
  border-left-width: 5px;
  border-radius: 5px;
  padding: 1em;
  margin: 1em 0;
}

figure {
  text-align: center;
}
```
```{r setup, echo=FALSE}
# 控制输出的宽度
options(width = 79)
```

::: rmdinfo
声明：本文引用的所有信息均为公开信息，仅代表作者本人观点，与就职单位无关。
:::

图形种类繁多，交互式的种类不比静态的少，本文亦无意全面罗列，而是以散点图为例，详细介绍几个常用 R 包的使用，望读者能举一反三。

注意权限，图形种类的丰富度，R 语言接口的成熟度等方面的比较

## 概览

 

![老忠实间歇泉喷发规律](https://user-images.githubusercontent.com/12031874/110227135-11e04400-7f30-11eb-949d-61210ee37f5a.png)


- [**rAmCharts4**](https://github.com/stla/rAmCharts4) 支持的图形种类还比较少 
- [**apexcharter**](https://github.com/dreamRs/apexcharter) 支持的图形种类还比较少 
- [**plotly**](https://github.com/ropensci/plotly) 功能很全，但是很笨重，作者在这方面没有投入太多精力解决用户问题，处于维护
- [**echarts4r**](https://github.com/JohnCoene/echarts4r) 功能很全，比较轻量，但是和 plotly 一样都严重依赖 dplyr，而我不喜欢 dplyr 特别是不喜欢画图的库还依赖 dplyr
- [**highcharter**](https://github.com/jbkunst/highcharter) 函数接口命名很糟糕，轻量

结合我司的情况， 做了很多定制，包装，plotly 还是首选

- 轻量：一方面图形库本身，另一方面依赖
- 不仅仅是作者一人维护，而且有多位持续维护者
- 功能比较全面，比如 plotly 和 echarts4r 包

## plotly

Python 社区比较大，[pyecharts](https://github.com/pyecharts/pyecharts) 在 Github 上的星赞比较多，但是还要考虑做数据产品的方便，就是与类似 shiny 这样的 Web 库的协同情况

### Python 语言版本

JavaScript 库 Plotly 的 Python 接口绘制图\@ref(fig:plotly-python-iris)，iris 鸢尾花数据集按花种类分组线性回归，展示相关性。

Python 

```python
import plotly.express as px
px.scatter(
    px.data.iris(),
    x="sepal_width",
    y="sepal_length",
    color="species",
    trendline="ols",
    template="simple_white",
    labels={
        "sepal_length": "萼片长度 (cm)",
        "sepal_width": "萼片宽度 (cm)",
        "species": "种类",
    },
    title="Edgar Anderson 的鸢尾花数据",
    color_discrete_sequence=px.colors.qualitative.Set2
)
```


![(\#fig:plotly-python-iris)鸢尾花散点图](https://user-images.githubusercontent.com/12031874/140610586-742caa14-c55a-460d-be04-f0810104f6d6.png){.full}

RColorBrewer 包内置调色板见图 \@ref(fig:rcolorbrewer)

![(\#fig:rcolorbrewer) RColorBrewer 包内置调色板](https://user-images.githubusercontent.com/12031874/140612809-ffac9e3e-566e-4ed3-8375-9ae1460d2088.png){.full}

### R 语言版本

R 语言版本

```r
library(plotly)

plot_ly(
  data = iris, 
  # 横轴变量
  x = ~Sepal.Width, 
  # 纵轴变量
  y = ~Sepal.Length, 
  # 分类变量
  color = ~Species,
  # 调色板：RColorBrewer 包内置的调色板都支持
  colors = "Set2",
  # 图形种类：散点图
  type = "scatter", 
  # 显示模式：散点，读者不妨试试 "markers+lines"
  mode = "markers",
  # 散点的样式
  marker = list(
    # 圆形
    symbol = "circle", 
    sizemode = "diameter", 
    # 散点大小
    size = 15,
    # 圆点的边界宽度和颜色
    line = list(width = 2, color = "#FFFFFF"), 
    # 透明度
    opacity = 0.7
  ),
  text = ~ paste0(
    "萼片宽度：", Sepal.Width, "<br>",
    "萼片长度：", Sepal.Length
  ),
  hoverinfo = 'text'
)
```

![(\#fig:plotly-r-iris)鸢尾花散点图](https://user-images.githubusercontent.com/12031874/140611946-2971d2e6-dab7-4814-8b22-ba57d505bbb3.png){.full}

散点图更多详细设置见[文档](https://plotly.com/r/marker-style/)

::: rmdinfo
Python 版本和 R 语言版本不要同时使用，以免 plotly 库版本不同带来冲突。另一个值得一提的是移除 plotly 图形右上方的工具条，可以添加全局的 CSS 设置。

```css
.modebar {
  display: none !important;
}
```

不管是连续型还是离散型的调色板，数量都是 8-12 个有限值，一旦超出数量会触发警告：

```
Warning message:
In RColorBrewer::brewer.pal(n = 20, name = "Set2") :
  n too large, allowed maximum for palette Set2 is 8
Returning the palette you asked for with that many colors
```

不过，plotly 还是会通过插值方式返回足够多的色块，读者也可以尝试使用 `viridis`、`plasma`、`magma` 或 `inferno` 调色板，它们既可以当连续的也可以当离散的用。
:::

## ggplot2

Edgar Anderson 的鸢尾花数据 ggplot2 图 \@ref(fig:ggplot2-iris)

```r
library(ggplot2)
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  labs(x = "萼片长度", y = "萼片宽度", color = "种类") +
  theme_bw(base_size = 13, base_family = "Noto Sans") +
  theme(title = element_text(family = "Noto Serif CJK SC"))
```

![(\#fig:ggplot2-iris)鸢尾花散点图](https://user-images.githubusercontent.com/12031874/140610866-f142b14e-071c-48b2-b32d-b59c697516e2.png){.full}

## scatterD3

[scatterD3](https://github.com/juba/scatterD3) 基于鼎鼎大名的 D3 图形库，在散点图方面的渲染效果非常好。

如图\@ref(fig:scatterd3-iris) 所示

```r
# 加载 R 包
library(scatterD3)

scatterD3(
  # 数据集
  data = iris, 
  # 横轴变量
  x = Sepal.Length, 
  # 纵轴变量
  y = Sepal.Width,
  # 分类变量
  col_var = Species, 
  # 分类调色板 Tableau
  colors = "schemeTableau10",
  # 散点的大小
  point_size = 200, 
  # 散点的透明度
  point_opacity = 0.7,
  # 鼠标悬停处散点的大小
  hover_size = 4, 
  # 鼠标悬停处散点的透明度
  hover_opacity = 1,
  # 横轴标题
  xlab = "Sepal Length",
  # 纵轴标题
  ylab = "Sepal Width", 
  # 图例标题
  col_lab = "Species",
  # 坐标轴字体大小
  axes_font_size = "160%", 
  # 图例字体大小
  legend_font_size = "16px",
  # 提示符出现左上
  tooltip_position = "top left", 
  # 聚类椭圆
  ellipses = TRUE, 
  # 去掉导出
  menu = FALSE
)
```

![(\#fig:scatterd3-iris) 鸢尾花散点图](https://user-images.githubusercontent.com/12031874/140610124-7bc984cf-c3dc-474b-896a-fa87a22244f9.png){.full}



[分类离散型](https://github.com/d3/d3-scale-chromatic#categorical)的调色板支持所有 RColorBrewer 包内置的离散型调色板，外加 schemeCategory10 和 schemeTableau10 两个调色板，注意使用时要色板名添加前缀 scheme，[数值连续型](https://github.com/d3/d3-scale-chromatic#diverging) 与之类似，不再赘述。

## apexcharter

[apexcharter](https://github.com/dreamRs/apexcharter) 是 [apexcharts.js](https://github.com/apexcharts/apexcharts.js) 的 R 接口，apexcharts.js 构建于 SVG 之上，原生支持矢量图形导出。

```r
library(apexcharter)

apex(
  data = iris,
  aes(x = Sepal.Width, y = Sepal.Length, fill = Species),
  type = "scatter"
) |>
  # 设置调色板
  ax_colors(RColorBrewer::brewer.pal(n = 3, name = "Set2")) |>
  # 散点的透明度
  ax_fill(opacity = 0.7) |>
  # 显示图例
  ax_legend(show = TRUE) |>
  # 标题
  ax_title(text = "散点图") |>
  # 副标题
  ax_subtitle(text = "鸢尾花数据集")
```


![(\#fig:apexcharter-iris) 鸢尾花散点图](https://user-images.githubusercontent.com/12031874/140614562-691f12d3-3d59-4096-b087-3f01da4c4795.png){.full}

设置调色板的部分，也可以采用手动一一指定的方式，用下述代码替换 `ax_colors()` 所在行。

```r
ax_colors_manual(list(
  "setosa" = "#66C2A5",
  "versicolor" = "#FC8D62",
  "virginica" = "#8DA0CB"
))
```


## echarts4r

[echarts4r](https://github.com/JohnCoene/echarts4r)

```r
# x/y 轴自适应，不要从 0 开始
library(echarts4r)

iris <- transform(iris,
  color = factor(
    Species,
    levels = c("setosa", "versicolor", "virginica"),
    labels = RColorBrewer::brewer.pal(n = 3, name = "Set2")
  )
)

e_chart(data = iris, x = Sepal.Width) |>
  e_scatter(serie = Sepal.Length, symbol_size = 10) |>
  e_add_nested("itemStyle", color)
```

## 其它 R 包

当然，此外还有很多可以绘制交互式图形的 R 包，如[**rAmCharts4**](https://github.com/stla/rAmCharts4)、[**highcharter**](https://github.com/jbkunst/highcharter)和 [rbokeh](https://github.com/bokeh/rbokeh) 等，不再一一介绍，希望读者能多练习，然后掌握其一般规律。

```r
# 移除背景网格、按钮
library(rbokeh)
figure() %>%
  ly_points(Sepal.Length, Sepal.Width,
    data = iris,
    color = Species, glyph = Species,
    hover = list(Sepal.Length, Sepal.Width)
  )
```

**rAmCharts4** 和 **highcharter** 分别依赖商业的图形库[amCharts 4](https://www.amcharts.com/docs/v4/)和[highcharts](https://www.highcharts.com/)，有一定版权风险，因此，不推荐使用。

[visNetwork](https://github.com/datastorm-open/visNetwork) 交互网络图，[leaflet](https://github.com/rstudio/leaflet) 交互地图等。[Ryan Hafen](https://github.com/hafen) 收集整理的交互式图形 R 包的[展览网站](https://gallery.htmlwidgets.org/)



## 环境信息

在 RStudio IDE 内编辑本文的 Rmarkdown 源文件，用 **blogdown** 构建网站，[Hugo](https://github.com/gohugoio/hugo) 渲染 knitr 之后的 Markdown 文件，得益于 **blogdown** 对 Rmarkdown 格式的支持，图、表和参考文献的交叉引用非常方便，省了不少文字编辑功夫。文中使用了多个 R 包，为方便复现本文内容，下面列出详细的环境信息：

```{r}
xfun::session_info(packages = c(
  "knitr", "rmarkdown", "blogdown", 
  "plotly", "scatterD3", "echarts4r", 
  "apexcharter", "ggplot2"
), dependencies = FALSE)
```

